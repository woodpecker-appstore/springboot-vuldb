package me.gv7.woodpecker.plugin.exploits;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.plugin.Bean.PropertiesBean;
import net.dongliu.requests.RawResponse;
import net.dongliu.requests.Requests;

import java.util.*;

public class SpringBootActuatorsInfoExploit implements IExploit {
    List<String> pointListV1 = new ArrayList<>();
    List<String> pointListV2 = new ArrayList<>();
    Map<String,String> h2Headers = new HashMap<>();
    boolean SpringbootVersionV1 = false;
    String[] basicPoint = new String[]{"cloudfoundryapplication","hystrix.stream" };
    PropertiesBean properties;

    public SpringBootActuatorsInfoExploit(){
        h2Headers.put("Cache-Control", "max-age=0");

        pointListV1.add("autoconfig");
        pointListV1.add("heapdump");
        pointListV1.add("dump");
        pointListV1.add("mappings");
        pointListV1.add("auditevents");
        pointListV1.add("beans");
        pointListV1.add("health");
        pointListV1.add("configprops");
        pointListV1.add("info");
        pointListV1.add("loggers");
        pointListV1.add("threaddump");
        pointListV1.add("metrics");
        pointListV1.add("trace");
        pointListV1.add("env/spring.jmx.enabled");


        pointListV2.add("actuator/auditevents");
        pointListV2.add("actuator/beans");
        pointListV2.add("actuator/health");
        pointListV2.add("actuator/conditions");
        pointListV2.add("actuator/configprops");
        pointListV2.add("actuator/info");
        pointListV2.add("actuator/loggers");
        pointListV2.add("actuator/threaddump");
        pointListV2.add("actuator/metrics");
        pointListV2.add("actuator/httptrace");
        pointListV2.add("actuator/mappings");
        pointListV2.add("actuator/jolokia");
        pointListV2.add("actuator/hystrix.stream");
        pointListV2.add("actuator/env/spring.jmx.enabled");

        pointListV2.add("monitor/auditevents");
        pointListV2.add("monitor/beans");
        pointListV2.add("monitor/conditions");
        pointListV2.add("monitor/configprops");
        pointListV2.add("monitor/env");
        pointListV2.add("monitor/info");
        pointListV2.add("monitor/loggers");
        pointListV2.add("monitor/heapdump");
        pointListV2.add("monitor/threaddump");
        pointListV2.add("monitor/metrics");
        pointListV2.add("monitor/scheduledtasks");
        pointListV2.add("monitor/httptrace");
        pointListV2.add("monitor/mappings");
        pointListV2.add("monitor/jolokia");
        pointListV2.add("monitor/hystrix.stream");
    }

    @Override
    public String getExploitTabCaption() {
        return "SpringBoot Actuators Info探测";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        return null;
    }



    @Override
    public void doExploit(ITarget target, Map<String, String> map, IResultOutput result) {
        String address = target.getAddress();
        if (SpringbootUtils.SpringbootCheck(address)){
            result.successPrintln("检测到springboot 404特征！");
        }

        if (SpringbootUtils.check404(address)){
            result.errorPrintln("默认404页面返回200，无法准确爆破！");
        }
        checkActuatorPointV1(address, result);
        checkEnvPointV1(address, result);
        if (!SpringbootVersionV1){
            checkActuatorPointV2(address, result);
            checkEnvPointV2(address, result);
        }
        checkJolokiaActuatorPoint(address, result);
        checkJolokiaListPoint(address, result);
        checkBasicPoint(address, result);

    }

    // Spring Boot env端点存在环境属性覆盖和XStream反序列化漏洞
    private void checkEnvPointV1(String addr,IResultOutput result){
        final String url = addr+"env";
        RawResponse response = getResponse(url);
        String resp = SpringbootUtils.scannerOutput(new Scanner(response.body()));
        if (response.statusCode() ==200){
            SpringbootVersionV1 = true;
            result.successPrintln("检测到env端点，Springboot 1.x: "+ url);
            properties = SpringbootUtils.EnvParser(resp);
            parseProperties(properties, result);
            if (resp.contains("spring.cloud.bootstrap.location")){
                result.successPrintln(" [*]检测到spring.cloud.bootstrap.location属性,可进行环境属性覆盖RCE!");
            }else if(resp.contains("eureka.client.serviceUrl.defaultZone")){
                result.successPrintln(" [*]检测到eureka.client.serviceUrl.defaultZone属性,可进行XStream反序列化RCE!");
            }else if (resp.contains("spring.h2.console.enabled")){
                result.successPrintln(" [*]检测到配置了H2 console属性,可能可以进行h2反序列化RCE!");
            }
        }
    }

    // Spring Boot 2.x版本存在H2配置不当导致的RCE，目前非正则判断，测试阶段
    private void checkEnvPointV2(String addr,IResultOutput result){
        final String url = addr+"actuator/env";
        RawResponse response = getResponse(url);
        String resp = SpringbootUtils.scannerOutput(new Scanner(response.body()));
        //String resp = response.readToText();
        if (response.statusCode() ==200){
            result.successPrintln("检测到env端点，Springboot 2.x: "+ url);
            properties = SpringbootUtils.EnvParser(resp);
            parseProperties(properties, result);
            if (resp.contains("spring.cloud.bootstrap.location")){
                result.successPrintln(" [*]检测到spring.cloud.bootstrap.location属性,可进行环境属性覆盖RCE!");
            }else if(resp.contains("eureka.client.serviceUrl.defaultZone")){
                result.successPrintln(" [*]检测到eureka.client.serviceUrl.defaultZone属性,可进行XStream反序列化RCE!");
            }else if (resp.contains("spring.h2.console.enabled")){
                result.successPrintln(" [*]检测到配置了H2 console属性,可能可以进行h2反序列化RCE!");
            }
        }
        RawResponse h2Response = Requests.post(addr + "actuator/restart")
                .verify(false)
                .headers(h2Headers)
                .send();
        if (h2Response.statusCode() == 200){
            result.successPrintln(" [*]检测到env restart端点,可进行H2 RCE!");
        }
    }

    // Spring Boot 1.x版本端点在根URL下注册。
    private void checkActuatorPointV1(String addr,IResultOutput result){
        for (String point: pointListV1){
            if (checkPoint(addr, point, result)){
                SpringbootVersionV1 = true;
            }
        }
    }

    // Spring Boot 2.x版本端点移动到/actuator/路径
    private void checkActuatorPointV2(String addr,IResultOutput result){
        for (String point: pointListV1){
            checkPoint(addr, point, result);
        }
    }

    private void checkBasicPoint(String addr,IResultOutput result){
        for (String point: basicPoint){
            checkPoint(addr, point, result);
        }
    }

    private void checkJolokiaListPoint(String addr,IResultOutput result){
        final String url = addr+"jolokia/list";
        RawResponse response = getResponse(url);
        checkJolokiaPoint(response, url, result);
    }

    private void checkJolokiaActuatorPoint(String addr,IResultOutput result){
        final String url = addr+"actuator/jolokia/list";
        RawResponse response = getResponse(url);
        checkJolokiaPoint(response, url, result);
    }

    private void checkJolokiaPoint(RawResponse response,String url,IResultOutput result){
        if (response.statusCode() ==200){
            String resp = SpringbootUtils.scannerOutput(new Scanner(response.body()));
            result.successPrintln("检测到jolokia端点: "+ url);
            if (resp.contains("reloadByURL")){
                result.successPrintln(" [*]检测到reloadByURL方法,可进行XXE/RCE!");
            }else if(resp.contains("createJNDIRealm")){
                result.successPrintln(" [*]检测到createJNDIRealm方法,可进行JNDI注入!");
            }
        }
    }

    private boolean checkPoint(String addr,String point,IResultOutput result){
        final String url = addr+point;
        RawResponse response = getResponse(url);
        if (response.statusCode()==200){
            result.successPrintln("检测到 "+ point +"端点: "+ url);
            return true;
        }
        return false;
    }

    private RawResponse getResponse(String url){
        return Requests.get(url).verify(false).send();
    }
    private void parseProperties(PropertiesBean properties, IResultOutput result){
        if (properties.getHaveInfo()){
            result.infoPrintln("\tJVM信息:\t\t"+properties.getJvmName());
            result.infoPrintln("\t端口信息:\t\t"+properties.getServerPort());
            result.infoPrintln("\tJava版本:\t\t"+properties.getJavaVersion());
            result.infoPrintln("\t用户名:\t\t"+properties.getUserName());
        }
    }
}
